cG93ZXJzaGVsbCAtdyBoaWRkZW4gLW5vcCAtYyBmdW5jdGlvbiBSU0N7aWYgKCRjLkNvbm5lY3Rl
ZCAtZXEgJHRydWUpIHskYy5DbG9zZSgpfTtpZiAoJHAuRXhpdENvZGUgLW5lICRudWxsKSB7JHAu
Q2xvc2UoKX07ZXhpdDt9OyRhPSdZT1VSTEhPU1QnOyRwPSdZT1VSTFBPUlQnOyRjPU5ldy1PYmpl
Y3Qgc3lzdGVtLm5ldC5zb2NrZXRzLnRjcGNsaWVudDskYy5jb25uZWN0KCRhLCRwKTskcz0kYy5H
ZXRTdHJlYW0oKTskbmI9TmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdICRjLlJlY2VpdmVCdWZmZXJT
aXplOyRwPU5ldy1PYmplY3QgU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3M7JHAuU3RhcnRJbmZv
LkZpbGVOYW1lPSdjbWQuZXhlJzskcC5TdGFydEluZm8uUmVkaXJlY3RTdGFuZGFyZElucHV0PTE7
JHAuU3RhcnRJbmZvLlJlZGlyZWN0U3RhbmRhcmRPdXRwdXQ9MTskcC5TdGFydEluZm8uVXNlU2hl
bGxFeGVjdXRlPTA7JHAuU3RhcnQoKTskaXM9JHAuU3RhbmRhcmRJbnB1dDskb3M9JHAuU3RhbmRh
cmRPdXRwdXQ7U3RhcnQtU2xlZXAgMTskZT1uZXctb2JqZWN0IFN5c3RlbS5UZXh0LkFzY2lpRW5j
b2Rpbmc7d2hpbGUoJG9zLlBlZWsoKSAtbmUgLTEpeyRvICs9ICRlLkdldFN0cmluZygkb3MuUmVh
ZCgpKX07JHMuV3JpdGUoJGUuR2V0Qnl0ZXMoJG8pLDAsJG8uTGVuZ3RoKTskbz0kbnVsbDskZD0k
ZmFsc2U7JHQ9MDt3aGlsZSAoLW5vdCAkZCkge2lmICgkYy5Db25uZWN0ZWQgLW5lICR0cnVlKSB7
UlNDfTskcG9zPTA7JGk9MTsgd2hpbGUgKCgkaSAtZ3QgMCkgLWFuZCAoJHBvcyAtbHQgJG5iLkxl
bmd0aCkpIHskcj0kcy5SZWFkKCRuYiwkcG9zLCRuYi5MZW5ndGggLSAkcG9zKTskcG9zKz0kcjtp
ZiAoLW5vdCAkcG9zIC1vciAkcG9zIC1lcSAwKSB7UlNDfTtpZiAoJG5iWzAuLiQoJHBvcy0xKV0g
LWNvbnRhaW5zIDEwKSB7YnJlYWt9fTtpZiAoJHBvcyAtZ3QgMCl7JHN0cj0kZS5HZXRTdHJpbmco
JG5iLDAsJHBvcyk7JGlzLndyaXRlKCRzdHIpO3N0YXJ0LXNsZWVwIDE7aWYgKCRwLkV4aXRDb2Rl
IC1uZSAkbnVsbCl7UlNDfWVsc2V7JG89JGUuR2V0U3RyaW5nKCRvcy5SZWFkKCkpO3doaWxlKCRv
cy5QZWVrKCkgLW5lIC0xKXskbyArPSAkZS5HZXRTdHJpbmcoJG9zLlJlYWQoKSk7aWYgKCRvIC1l
cSAkc3RyKSB7JG89Jyd9fTskcy5Xcml0ZSgkZS5HZXRCeXRlcygkbyksMCwkby5sZW5ndGgpOyRv
PSRudWxsOyRzdHI9JG51bGx9fWVsc2V7UlNDfX07Cg==
